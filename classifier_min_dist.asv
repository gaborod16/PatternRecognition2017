%% Minimmum distance classifier for the binary scenario
%  Using Kruskal Wallis feature selection.

% Measures walking and not walking
m_walking=[];
m_not_walking=[];

for i=1:meta.n_train_samples
    if data.y_train_bin(i) == 1 
        m_walking=[m_walking; kw_bin.X_train(i,:)];
    else
        m_not_walking=[m_not_walking; kw_bin.X_train(i,:)];
    end
    
end

% Walking means by feature
w_mean1=mean(m_walking(:,1));
w_mean2=mean(m_walking(:,2));
w_mean3=mean(m_walking(:,3));

% Not walking means by feature
nw_mean1=mean(m_not_walking(:,1));
nw_mean2=mean(m_not_walking(:,2));
nw_mean3=mean(m_not_walking(:,3));

test_result=[];

for i=1:meta.n_test_samples
    dist_w=sqrt((w_mean1-kw_bin.X_test(i,1))^2+(w_mean2-kw_bin.X_test(i,2))^2+(w_mean3-kw_bin.X_test(i,3))^2);
    dist_n_w=sqrt((nw_mean1-kw_bin.X_test(i,1))^2+(nw_mean2-kw_bin.X_test(i,1))^2+(nw_mean3-kw_bin.X_test(i,1))^2);

    if dist_w < dist_n_w
        test_result=[test_result 1];
    else
        test_result=[test_result 0];
    end
   
end

conf_matrix=[0 0; 0 0];
for k=1:meta.n_test_samples
    if test_result(k)==1 && data.y_test_bin(k)==1
        conf_matrix(1,1)=conf_matrix(1,1)+1;
    elseif test_result(k)==0 && data.y_test_bin(k)==0
        conf_matrix(2,2)=conf_matrix(2,2)+1;
    elseif test_result(k)==1 && data.y_test_bin(k)==0
        conf_matrix(2,1)=conf_matrix(2,1)+1;
    elseif test_result(k)==0 && data.y_test_bin(k)==1
        conf_matrix(1,2)=conf_matrix(1,2)+1;
    end
end

conf_matrix
sprintf('accuracy = %.4f',(conf_matrix(1,1) + conf_matrix(2,2)) / sum(sum(conf_matrix)))
sprintf('precision = %.4f', conf_matrix(1,1) / (conf_matrix(1,1) + conf_matrix(2,1)))
sprintf('recall = %.4f', conf_matrix(1,1) / (conf_matrix(1,1) + conf_matrix(1,2)))
 
 clear dist_n_w dist_w i k ans nw_mean1 nw_mean2 nw_mean3 w_mean1 w_mean2 w_mean3 m_not_walking m_walking test_result;